/*
 * snacc-asn1.grammar
 *
 * This work is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This work is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 *
 * Copyright (C) 1990, 1991, 1992 Michael Sample
 *               and the University of British Columbia
 * Copyright (c) 2004 Per Cederberg. All rights reserved.
 */

%header%

GRAMMARTYPE = "LR"

DESCRIPTION = "A grammar for ASN.1 '88, as interpreted from Appendix II of
               CCITT recomendation X.208. Some macro definitions have also
               been added to the grammar.

               The grammar has been semi-adapted for Grammatica by Per
               Cederberg. The original grammar comes from the yacc sources
               of Snacc, a free ASN.1 to C compiler by Mike Sample."

AUTHOR      = "Per Cederberg, <per at percederberg dot net>"
VERSION     = "1.0"
DATE        = "27 June 2003"

LICENSE     = "This work is free software; you can redistribute it and/or modify
               it under the terms of the GNU General Public License as published
               by the Free Software Foundation; either version 2 of the License,
               or (at your option) any later version.

               This work is distributed in the hope that it will be useful, but
               WITHOUT ANY WARRANTY; without even the implied warranty of
               MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
               General Public License for more details.

               You should have received a copy of the GNU General Public License
               along with this program; if not, write to the Free Software
               Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
               USA"

COPYRIGHT   = "Copyright (C) 1990, 1991, 1992 Michael Sample
                             and the University of British Columbia
               Copyright (c) 2004 Per Cederberg. All rights reserved."


%tokens%

BOXC_SYM                     = "[C]"
BOXS_SYM                     = "[S]"
WHITESPACE                   = <<[ \t\n\r]+>> %ignore%
DOT_SYM                      = "."
COMMA_SYM                    = ","
LEFTBRACE_SYM                = "{"
RIGHTBRACE_SYM               = "}"
LEFTPAREN_SYM                = "("
RIGHTPAREN_SYM               = ")"
LEFTBRACKET_SYM              = "["
RIGHTBRACKET_SYM             = "]"
LESSTHAN_SYM                 = "<"
MINUS_SYM                    = "-"
GETS_SYM                     = "::="
BAR_SYM                      = "|"
SEMI_COLON_SYM               = ";"
TAGS_SYM                     = "TAGS"
BOOLEAN_SYM                  = "BOOLEAN"
INTEGER_SYM                  = "INTEGER"
BIT_SYM                      = "BIT"
STRING_SYM                   = "STRING"
OCTET_SYM                    = "OCTET"
NULL_SYM                     = "NULL"
SEQUENCE_SYM                 = "SEQUENCE"
OF_SYM                       = "OF"
SET_SYM                      = "SET"
IMPLICIT_SYM                 = "IMPLICIT"
CHOICE_SYM                   = "CHOICE"
ANY_SYM                      = "ANY"
OBJECT_IDENTIFIER_SYM        = <<OBJECT[ \t\n\r]*IDENTIFIER>>
OPTIONAL_SYM                 = "OPTIONAL"
DEFAULT_SYM                  = "DEFAULT"
COMPONENTS_SYM               = "COMPONENTS"
UNIVERSAL_SYM                = "UNIVERSAL"
APPLICATION_SYM              = "APPLICATION"
PRIVATE_SYM                  = "PRIVATE"
TRUE_SYM                     = "TRUE"
FALSE_SYM                    = "FALSE"
BEGIN_SYM                    = "BEGIN"
END_SYM                      = "END"
DEFINITIONS_SYM              = "DEFINITIONS"
EXPLICIT_SYM                 = "EXPLICIT"
ENUMERATED_SYM               = "ENUMERATED"
EXPORTS_SYM                  = "EXPORTS"
IMPORTS_SYM                  = "IMPORTS"
REAL_SYM                     = "REAL"
INCLUDES_SYM                 = "INCLUDES"
MIN_SYM                      = "MIN"
MAX_SYM                      = "MAX"
SIZE_SYM                     = "SIZE"
FROM_SYM                     = "FROM"
WITH_SYM                     = "WITH"
COMPONENT_SYM                = "COMPONENT"
PRESENT_SYM                  = "PRESENT"
ABSENT_SYM                   = "ABSENT"
DEFINED_SYM                  = "DEFINED"
BY_SYM                       = "BY"
PLUS_INFINITY_SYM            = "PLUS-INFINITY"
MINUS_INFINITY_SYM           = "MINUS-INFINITY"
// TODO: MACRODEFBODY_SYM             = defined in source code...
NAMEDMACRO_SYM               = <<[A-Z](-[A-Z0-9]|[A-Z0-9])*[ \t\n\r]*MACRO>>
OPERATION_SYM                = "OPERATION"
ARGUMENT_SYM                 = "ARGUMENT"
RESULT_SYM                   = "RESULT"
ERRORS_SYM                   = "ERRORS"
LINKED_SYM                   = "LINKED"
ERROR_SYM                    = "ERROR"
PARAMETER_SYM                = "PARAMETER"
BIND_SYM                     = "BIND"
BINDERROR_SYM                = "BIND-ERROR"
UNBIND_SYM                   = "UNBIND"
UNBINDERROR_SYM              = "UNBIND-ERROR"
AC_SYM                       = "APPLICATION-CONTEXT"
ASES_SYM                     = "APPLICATION-SERVICE-ELEMENTS"
REMOTE_SYM                   = "REMOTE"
INITIATOR_SYM                = "INITIATOR"
RESPONDER_SYM                = "RESPONDER"
ABSTRACTSYNTAXES_SYM         = <<ABSTRACT[ \t\n\r]*SYNTAXES>>
ASE_SYM                      = "APPLICATION-SERVICE-ELEMENT"
OPERATIONS_SYM               = "OPERATIONS"
CONSUMERINVOKES_SYM          = <<CONSUMER[ \t\n\r]*INVOKES>>
SUPPLIERINVOKES_SYM          = <<SUPPLIER[ \t\n\r]*INVOKES>>
EXTENSIONATTRIBUTE_SYM       = "EXTENSION-ATTRIBUTE"
EXTENSIONS_SYM               = "EXTENSIONS"
CHOSEN_SYM                   = "CHOSEN"
EXTENSION_SYM                = "EXTENSION"
CRITICAL_SYM                 = "CRITICAL"
FOR_SYM                      = "FOR"
SUBMISSION_SYM               = "SUBMISSION"
DELIVERY_SYM                 = "DELIVERY"
TRANSFER_SYM                 = "TRANSFER"
OBJECT_SYM                   = "OBJECT"
PORTS_SYM                    = "PORTS"
PORT_SYM                     = "PORT"
ABSTRACTOPS_SYM              = <<ABSTRACT[ \t\n\r]*OPERATIONS>>
REFINE_SYM                   = "REFINE"
AS_SYM                       = "AS"
RECURRING_SYM                = "RECURRING"
VISIBLE_SYM                  = "VISIBLE"
PAIRED_SYM                   = "PAIRED"
ABSTRACTBIND_SYM             = "ABSTRACT-BIND"
TO_SYM                       = "TO"
ABSTRACTUNBIND_SYM           = "ABSTRACT-UNBIND"
ABSTRACTERROR_SYM            = "ABSTRACT-ERROR"
ABSTRACTOPERATION_SYM        = "ABSTRACT-OPERATION"
TOKEN_SYM                    = "TOKEN"
TOKENDATA_SYM                = "TOKEN-DATA"
SECURITYCATEGORY_SYM         = "SECURITY-CATEGORY"
ALGORITHM_SYM                = "ALGORITHM"
ENCRYPTED_SYM                = "ENCRYPTED"
SIGNED_SYM                   = "SIGNED"
SIGNATURE_SYM                = "SIGNATURE"
PROTECTED_SYM                = "PROTECTED"
OBJECTTYPE_SYM               = "OBJECT-TYPE"
SYNTAX_SYM                   = "SYNTAX"
ACCESS_SYM                   = "ACCESS"
STATUS_SYM                   = "STATUS"
DESCRIPTION_SYM              = "DESCRIPTION"
REFERENCE_SYM                = "REFERENCE"
INDEX_SYM                    = "INDEX"
DEFVAL_SYM                   = "DEFVAL"
// TODO: BRACEBAL_SYM                 = defined in source code...
BSTRING_SYM                  = <<\'[0-1]*\'B>>
HSTRING_SYM                  = <<\'[0-9A-Fa-f]*\'H>>
CSTRING_SYM                  = <<\"([^\"]|\"\")*\">>
UCASEFIRST_IDENT_SYM         = <<[A-Z](-[a-zA-Z0-9]|[a-zA-Z0-9])*>>
LCASEFIRST_IDENT_SYM         = <<[a-z](-[a-zA-Z0-9]|[a-zA-Z0-9])*>>
NUMBER_SYM                   = <<0|[1-9][0-9]*>>
SNACC_ATTRIBUTES             = <<--snacc(-[^-\n]|[^\-\n])*(--|\n)>>
COMMENT                      = <<--(-[^\-\n]|[^\-\n])*(--|\n|-\n)>> %ignore%


%productions%

/*-----------------------------------------------------------------------*/
/* Module def/import/export productions */
/*-----------------------------------------------------------------------*/

ModuleDefinition =
     ModuleIdentifier
     DEFINITIONS_SYM
     TagDefault
     GETS_SYM
     BEGIN_SYM
     ModuleBody
     END_SYM
;

TagDefault =
    EXPLICIT_SYM TAGS_SYM
  | IMPLICIT_SYM TAGS_SYM
  | empty
;

ModuleIdentifier =
    modulereference AssignedIdentifier
;

AssignedIdentifier =
    ObjectIdentifierValue
  | empty
;

ModuleBody =
    Exports Imports AssignmentList
  | empty
;

Exports =
    EXPORTS_SYM SymbolsExported SEMI_COLON_SYM
  | EXPORTS_SYM error SEMI_COLON_SYM
  | empty
;

SymbolsExported =
    ExportSymbolList
  | empty
;

ExportSymbolList =
    Symbol
  | ExportSymbolList COMMA_SYM Symbol
;

Imports =
    IMPORTS_SYM SymbolsImported SEMI_COLON_SYM
  | IMPORTS_SYM error SEMI_COLON_SYM
  | empty
;

SymbolsImported =
    SymbolsFromModuleList
  | empty
;

SymbolsFromModuleList =
    SymbolsFromModuleList SymbolsFromModule
  | SymbolsFromModule
;

SymbolsFromModule =
    SymbolList FROM_SYM ModuleIdentifier
;


SymbolList =
    SymbolList COMMA_SYM Symbol
  | Symbol
;

Symbol =
    typereference
  | identifier
  | DefinedMacroName  /* This solves macro "keyword" problem */
;

AssignmentList =
    AssignmentList AssignmentOrError
  | AssignmentOrError
;

AssignmentOrError =
    Assignment
  | Assignment SEMI_COLON_SYM
  | error SEMI_COLON_SYM
;

Assignment =
    TypeAssignment
  | ValueAssignment
  | NAMEDMACRO_SYM GETS_SYM BEGIN_SYM
    MACRODEFBODY_SYM
  | NAMEDMACRO_SYM GETS_SYM MacroReference
  | NAMEDMACRO_SYM GETS_SYM modulereference DOT_SYM MacroReference
;

MacroReference =
    typereference
  | DefinedMacroName
;

/*-----------------------------------------------------------------------*/
/* Type Notation Productions */
/*-----------------------------------------------------------------------*/

TypeAssignment =
    typereference GETS_SYM SnaccAttributes Type SnaccAttributes
;


ExternalTypeReference =
    modulereference DOT_SYM typereference
;


DefinedType =      /* could by CharacterString or Useful types too */
    ExternalTypeReference
  | typereference
;



Type =
    DefinedMacroType
  | BuiltinType
  | DefinedType
  | Subtype
;

BuiltinType =
    BooleanType
  | IntegerType
  | BitStringType
  | NullType
  | SequenceType
  | SequenceOfType
  | SetType
  | SetOfType
  | ChoiceType
  | SelectionType
  | TaggedType
  | AnyType
  | ObjectIdentifierType
  | EnumeratedType
  | RealType
  | OCTET_SYM STRING_SYM
;

NamedType =
    identifier Type
  | Type       /* this handles selectionType as well */
;

BooleanType =
    BOOLEAN_SYM
;

IntegerType =
    INTEGER_SYM
  | INTEGER_SYM LEFTBRACE_SYM NamedNumberList RIGHTBRACE_SYM
;


NamedNumberList =
    NamedNumber
  | NamedNumberList COMMA_SYM NamedNumber
;

NamedNumber =
    identifier LEFTPAREN_SYM SignedNumber RIGHTPAREN_SYM
  | identifier LEFTPAREN_SYM DefinedValue RIGHTPAREN_SYM
;

SignedNumber =
    NUMBER_SYM
    | NUMBER_ERANGE
    | MINUS_SYM NUMBER_SYM
    | MINUS_SYM NUMBER_ERANGE
;

EnumeratedType =
    ENUMERATED_SYM LEFTBRACE_SYM NamedNumberList RIGHTBRACE_SYM
;


RealType =
    REAL_SYM
;

BitStringType =
    BIT_SYM STRING_SYM
  | BIT_SYM STRING_SYM LEFTBRACE_SYM NamedBitList RIGHTBRACE_SYM
;

NamedBitList =
    NamedNumberList
;

NullType =
    NULL_SYM
;

SequenceOpening =
    SEQUENCE_SYM LEFTBRACE_SYM
;

SequenceType =
    SequenceOpening ElementTypes RIGHTBRACE_SYM
  | SequenceOpening RIGHTBRACE_SYM
;

ElementTypes =
    ElementTypeList SnaccAttributes
;

ElementTypeList =
    ElementType
  | ElementTypeList COMMA_SYM SnaccAttributes ElementType
;

ElementType =
    NamedType
  | NamedType OPTIONAL_SYM
  | NamedType DEFAULT_SYM NamedValue
  | COMPONENTS_SYM OF_SYM Type
  | identifier COMPONENTS_SYM OF_SYM Type
;



SequenceOfType =
    SEQUENCE_SYM OF_SYM Type
;

SetOpening =
    SET_SYM LEFTBRACE_SYM
;

SetType =
    SetOpening ElementTypes RIGHTBRACE_SYM
  | SetOpening RIGHTBRACE_SYM
;


SetOfType =
    SET_SYM OF_SYM Type
;


ChoiceType =
    CHOICE_SYM LEFTBRACE_SYM AlternativeTypes RIGHTBRACE_SYM
;

AlternativeTypes =
    AlternativeTypeList SnaccAttributes
;

AlternativeTypeList =
    NamedType
  | AlternativeTypeList COMMA_SYM SnaccAttributes NamedType
;


SelectionType =
    identifier LESSTHAN_SYM Type
;

TaggedType =
    Tag Type
  | Tag IMPLICIT_SYM Type
  | Tag EXPLICIT_SYM Type
;

Tag =
    LEFTBRACKET_SYM Class ClassNumber RIGHTBRACKET_SYM
;

ClassNumber =
    number
  | DefinedValue
;

Class =
    UNIVERSAL_SYM
  | APPLICATION_SYM
  | PRIVATE_SYM
  | empty
;


AnyType =
    ANY_SYM
  | ANY_SYM DEFINED_SYM BY_SYM identifier
;


ObjectIdentifierType =
    OBJECT_IDENTIFIER_SYM
;


Subtype =
    Type SubtypeSpec
  | SET_SYM SizeConstraint OF_SYM Type
  | SEQUENCE_SYM SizeConstraint OF_SYM Type
;


SubtypeSpec =
    LEFTPAREN_SYM SubtypeValueSetList RIGHTPAREN_SYM
;

SubtypeValueSetList =
    SubtypeValueSet
  | SubtypeValueSetList BAR_SYM SubtypeValueSet
;


SubtypeValueSet =
    SingleValue
  | ContainedSubtype
  | ValueRange
  | PermittedAlphabet
  | SizeConstraint
  | InnerTypeConstraints
;

SingleValue =
    Value

ContainedSubtype =
    INCLUDES_SYM Type
;

ValueRange =
    LowerEndPoint DOT_SYM DOT_SYM UpperEndPoint
;

LowerEndPoint =
    LowerEndValue
  | LowerEndValue LESSTHAN_SYM
;

UpperEndPoint =
    UpperEndValue
  | LESSTHAN_SYM UpperEndValue
;

LowerEndValue =
    Value
  | MIN_SYM
;

UpperEndValue =
    Value
  | MAX_SYM
;

SizeConstraint =
    SIZE_SYM SubtypeSpec
;


PermittedAlphabet =
    FROM_SYM SubtypeSpec
;

InnerTypeConstraints =
    WITH_SYM COMPONENT_SYM SingleTypeConstraint
  | WITH_SYM COMPONENTS_SYM MultipleTypeConstraints
;

SingleTypeConstraint =
    SubtypeSpec
;

MultipleTypeConstraints =
    FullSpecification
  | PartialSpecification
;

FullSpecification =
    LEFTBRACE_SYM TypeConstraints RIGHTBRACE_SYM
;

PartialSpecification =
    LEFTBRACE_SYM DOT_SYM DOT_SYM DOT_SYM COMMA_SYM TypeConstraints RIGHTBRACE_SYM
;


TypeConstraints =
    NamedConstraint
  | TypeConstraints COMMA_SYM NamedConstraint
;

NamedConstraint =
    identifier Constraint
  | Constraint

;

Constraint =
    ValueConstraint PresenceConstraint
;

ValueConstraint =
    SubtypeSpec
  | empty   ;

PresenceConstraint =
    PRESENT_SYM
  | ABSENT_SYM
  | empty
  | OPTIONAL_SYM
;






/*-----------------------------------------------------------------------*/
/* Value Notation Productions */
/*-----------------------------------------------------------------------*/

ValueAssignment =
    identifier Type GETS_SYM Value
;


Value =
    BuiltinValue
  | DefinedValue
;

DefinedValue =
    ExternalValueReference
  | identifier  /* a defined value or a named elmt ref  */
;

ExternalValueReference =
    modulereference  DOT_SYM identifier
;

BuiltinValue =
    BooleanValue
  | NullValue
  | SpecialRealValue
  | SignedNumber         /* IntegerValue  or "0" real val*/
  | HexString    /* OctetStringValue or BinaryStringValue */
  | BinaryString    /*  BinaryStringValue */
  | CharString
  | LEFTBRACE_SYM  BRACEBAL_SYM
;

BooleanValue =
    TRUE_SYM
  | FALSE_SYM
;


SpecialRealValue =
    PLUS_INFINITY_SYM
  | MINUS_INFINITY_SYM
;



NullValue =
    NULL_SYM
;


NamedValue =
    Value
  | identifier Value
;


ObjectIdentifierValue =
    LEFTBRACE_SYM ObjIdComponentList RIGHTBRACE_SYM
;


ObjIdComponentList =
    ObjIdComponentList ObjIdComponent
  | ObjIdComponent

;


ObjIdComponent =
    NumberForm
  | NameForm
  | NameAndNumberForm
;


NumberForm =
    number
;

NameForm =
    identifier
;


NameAndNumberForm =
    identifier LEFTPAREN_SYM NumberForm RIGHTPAREN_SYM
  | identifier LEFTPAREN_SYM DefinedValue RIGHTPAREN_SYM

;



BinaryString =
    BSTRING_SYM
;

HexString =
    HSTRING_SYM
;

CharString =
    CSTRING_SYM
;

number =
    NUMBER_SYM
  | NUMBER_ERANGE
;

identifier =
    LCASEFIRST_IDENT_SYM
;

modulereference =
    UCASEFIRST_IDENT_SYM
;

typereference =
    UCASEFIRST_IDENT_SYM
;

empty =
;


/* Snacc attributes/extra type info
 *  - encapsulated in special comments
 */
SnaccAttributes =
    SnaccAttributeCommentList
  | empty
;

SnaccAttributeCommentList =
    SNACC_ATTRIBUTES
  | SnaccAttributeCommentList  SNACC_ATTRIBUTES
;

/*
 *  Macro Syntax definitions
 **************************/

DefinedMacroType =
    RosOperationMacroType
  | RosErrorMacroType
  | RosBindMacroType
  | RosUnbindMacroType
  | RosAseMacroType
  | RosAcMacroType
  | MtsasExtensionMacroType
  | MtsasExtensionsMacroType
  | MtsasExtensionAttributeMacroType
  | MtsasTokenMacroType
  | MtsasTokenDataMacroType
  | MtsasSecurityCategoryMacroType
  | AsnObjectMacroType
  | AsnPortMacroType
  | AsnRefineMacroType
  | AsnAbstractBindMacroType
  | AsnAbstractUnbindMacroType
  | AsnAbstractOperationMacroType
  | AsnAbstractErrorMacroType
  | AfAlgorithmMacroType
  | AfEncryptedMacroType
  | AfProtectedMacroType
  | AfSignatureMacroType
  | AfSignedMacroType
  | SnmpObjectTypeMacroType
;

DefinedMacroName =
   OPERATION_SYM
 | ERROR_SYM
 | BIND_SYM
 | UNBIND_SYM
 | ASE_SYM
 | AC_SYM
 | EXTENSION_SYM
 | EXTENSIONS_SYM
 | EXTENSIONATTRIBUTE_SYM
 | TOKEN_SYM
 | TOKENDATA_SYM
 | SECURITYCATEGORY_SYM
 | OBJECT_SYM
 | PORT_SYM
 | REFINE_SYM
 | ABSTRACTBIND_SYM
 | ABSTRACTUNBIND_SYM
 | ABSTRACTOPERATION_SYM
 | ABSTRACTERROR_SYM
 | ALGORITHM_SYM
 | ENCRYPTED_SYM
 | SIGNED_SYM
 | SIGNATURE_SYM
 | PROTECTED_SYM
 | OBJECTTYPE_SYM
;


/*
 * Operation Macro (ROS)  added by MS 91/08/27
 */

RosOperationMacroType =
    OPERATION_SYM RosOperationMacroBody
;

RosOperationMacroBody =
    RosOpArgument RosOpResult RosOpErrors RosOpLinkedOps
;


RosOpArgument =
    ARGUMENT_SYM NamedType
  | empty
;

RosOpResult =
    RESULT_SYM RosOpResultType
  | empty
;


RosOpResultType =
    NamedType
  | empty
;


RosOpErrors =
    ERRORS_SYM LEFTBRACE_SYM PossiblyEmptyTypeOrValueList RIGHTBRACE_SYM
  | empty
;



RosOpLinkedOps =
    LINKED_SYM LEFTBRACE_SYM PossiblyEmptyTypeOrValueList RIGHTBRACE_SYM
  | empty
;




/*
 * ROS ERROR macro - ms 91/08/27
 */


RosErrorMacroType =
    ERROR_SYM RosErrParameter
;


RosErrParameter =
    PARAMETER_SYM NamedType
  | empty
;


/*
 * ROS BIND macro - ms 91/09/13
 */

RosBindMacroType =
    BIND_SYM RosBindArgument RosBindResult RosBindError
;

RosBindArgument =
    ARGUMENT_SYM NamedType
  | empty
;


RosBindResult =
    RESULT_SYM NamedType
  | empty
;


RosBindError =
    BINDERROR_SYM NamedType
  | empty
;


/*
 * ROS UNBIND ms 91/09/13
 */

RosUnbindMacroType =
     UNBIND_SYM RosBindArgument RosBindResult RosUnbindError
;


RosUnbindError =
    UNBINDERROR_SYM NamedType
  | empty
;


/*
 * ROS APPLICATION-SERVICE-ELEMENT macro ms 91/09/13
 */

RosAseMacroType =
    ASE_SYM RosAseSymmetricAse
  | ASE_SYM RosAseConsumerInvokes RosAseSupplierInvokes
;


RosAseSymmetricAse =
    OPERATIONS_SYM LEFTBRACE_SYM RosAseOperationList RIGHTBRACE_SYM
;


RosAseConsumerInvokes =
    CONSUMERINVOKES_SYM LEFTBRACE_SYM RosAseOperationList RIGHTBRACE_SYM
  | empty
;


RosAseSupplierInvokes =
    SUPPLIERINVOKES_SYM  LEFTBRACE_SYM RosAseOperationList RIGHTBRACE_SYM
  | empty
;


RosAseOperationList =
    ValueList
;


/*
 * ROS APPLICATION-CONTEXT macro ms 91/09/13
 */

RosAcMacroType =
    AC_SYM
    RosAcNonRoElements
    BIND_SYM Type
    UNBIND_SYM Type
    RosAcRoElements
    RosAcAbstractSyntaxes
;


RosAcNonRoElements =
    ASES_SYM LEFTBRACE_SYM ValueList RIGHTBRACE_SYM
;


RosAcRoElements =
    REMOTE_SYM OPERATIONS_SYM LEFTBRACE_SYM Value RIGHTBRACE_SYM
    RosAcSymmetricAses RosAcAsymmetricAses
  | empty
;

RosAcSymmetricAses =
    OPERATIONS_SYM OF_SYM  LEFTBRACE_SYM  ValueList RIGHTBRACE_SYM
  | empty
;

RosAcAsymmetricAses =
    RosAcInitiatorConsumerOf RosAcResponderConsumerOf
;

RosAcInitiatorConsumerOf =
    INITIATOR_SYM CONSUMER_SYM OF_SYM LEFTBRACE_SYM  ValueList RIGHTBRACE_SYM
  | empty
;

RosAcResponderConsumerOf =
    RESPONDER_SYM CONSUMER_SYM OF_SYM LEFTBRACE_SYM  ValueList RIGHTBRACE_SYM
  | empty
;

RosAcAbstractSyntaxes =
    ABSTRACTSYNTAXES_SYM LEFTBRACE_SYM  OidList RIGHTBRACE_SYM
  | empty
;


OidList =
    ObjectIdentifierValue
  | OidList COMMA_SYM ObjectIdentifierValue
;


/*
 * MTSAbstractSvc EXTENSIONS macro
 */

MtsasExtensionsMacroType =
    EXTENSIONS_SYM CHOSEN_SYM FROM_SYM
    LEFTBRACE_SYM PossiblyEmptyValueList RIGHTBRACE_SYM
;


PossiblyEmptyValueList =
    ValueList
  | empty
;

ValueList =
     Value
   | ValueList COMMA_SYM Value
 ;

PossiblyEmptyTypeOrValueList =
    TypeOrValueList
  | empty
;

TypeOrValueList =
    TypeOrValue
   | TypeOrValueList COMMA_SYM TypeOrValue
 ;

TypeOrValue =
    Type
  | Value
;

/*
 *  MTSAbstractSvc EXTENSION macro
 */

MtsasExtensionMacroType =
    EXTENSION_SYM NamedType MtsasExtDefaultVal MtsasExtCritical
  | EXTENSION_SYM
;

MtsasExtDefaultVal =
    DEFAULT_SYM Value
  | empty
;

MtsasExtCritical =
     CRITICAL_SYM FOR_SYM MtsasExtCriticalityList
   | empty
;


MtsasExtCriticalityList =
    MtsasExtCriticality
  | MtsasExtCriticalityList COMMA_SYM MtsasExtCriticality
;

MtsasExtCriticality =
    SUBMISSION_SYM
  | TRANSFER_SYM
  | DELIVERY_SYM
;



/*
 * MTSAbstractSvc X.411  EXTENSION-ATTRIBUTE macro
 */

MtsasExtensionAttributeMacroType =
    EXTENSIONATTRIBUTE_SYM
  | EXTENSIONATTRIBUTE_SYM Type
;


/*
 * X.411 MTSAbstractSvc TOKEN macro
 */
MtsasTokenMacroType =
    TOKEN_SYM
  | TOKEN_SYM Type
;


/*
 * X.411 MTSAS TOKEN-DATA macro type
 */
MtsasTokenDataMacroType =
    TOKENDATA_SYM
  | TOKENDATA_SYM Type
;


/*
 * X.411 MTSAS SECURITY-CATEGORY
 */
MtsasSecurityCategoryMacroType =
    SECURITYCATEGORY_SYM
  | SECURITYCATEGORY_SYM Type
;


/*
 * X.407 Abstract Service Notation Macro Type productions
 * MS 91/09/14
 */


/*
 * OBJECT Macro X.407
 */
AsnObjectMacroType =
    OBJECT_SYM AsnPorts
;

AsnPorts =
    PORTS_SYM LEFTBRACE_SYM AsnPortList RIGHTBRACE_SYM
  | empty
;

AsnPortList =
    AsnPort
  | AsnPortList COMMA_SYM AsnPort
;

AsnPort =
    Value AsnPortType
;

AsnPortType =
    BOXC_SYM
  | BOXS_SYM
  | empty
;



/*
 * PORT Macro X.407
 */
AsnPortMacroType =
    PORT_SYM AsnOperations
  | PORT_SYM
;


AsnOperations =
    ABSTRACTOPS_SYM LEFTBRACE_SYM TypeOrValueList RIGHTBRACE_SYM
  | AsnConsumer
  | AsnSupplier
  | AsnConsumer AsnSupplier
  | AsnSupplier AsnConsumer
;

AsnConsumer =
    CONSUMERINVOKES_SYM LEFTBRACE_SYM TypeOrValueList RIGHTBRACE_SYM
;

AsnSupplier =
    SUPPLIERINVOKES_SYM LEFTBRACE_SYM TypeOrValueList RIGHTBRACE_SYM

;




/*
 * REFINE Macro X.407
 *
 * just parse it - don't keep any info at the moment
 */
AsnRefineMacroType =
    REFINE_SYM AsnObject AS_SYM AsnComponentList
;

AsnComponentList =
    AsnComponent
  | AsnComponentList COMMA_SYM AsnComponent
;

AsnComponent =
    AsnObjectSpec AsnPortSpecList
;

AsnObjectSpec =
    AsnObject
  | AsnObject RECURRING_SYM
;

AsnPortSpecList =
    AsnPortSpec
  | AsnPortSpecList COMMA_SYM AsnPortSpec
;

AsnPortSpec =
    Value AsnPortType AsnPortStatus
;

AsnPortStatus =
    VISIBLE_SYM
  | PAIRED_SYM WITH_SYM AsnObjectList
;


AsnObjectList =
    AsnObject
  | AsnObjectList COMMA_SYM AsnObject
;

AsnObject =
    Value
;




/*
 * ABSTRACT-BIND Macro X.407
 */
AsnAbstractBindMacroType =
    ABSTRACTBIND_SYM AsnAbstractBindPorts
  | ABSTRACTBIND_SYM AsnAbstractBindPorts Type
;

AsnAbstractBindPorts =
    TO_SYM LEFTBRACE_SYM AsnPortList RIGHTBRACE_SYM
  | empty
;




/*
 * ABSTRACT-UNBIND Macro X.407
 */
AsnAbstractUnbindMacroType =
    ABSTRACTUNBIND_SYM AsnAbstractUnbindPorts
  | ABSTRACTUNBIND_SYM AsnAbstractUnbindPorts Type
;

AsnAbstractUnbindPorts =
    FROM_SYM LEFTBRACE_SYM AsnPortList RIGHTBRACE_SYM
  | empty
;



/*
 * ABSTRACT-OPERATION Macro X.407 (same as ROS Operation)
 */
AsnAbstractOperationMacroType =
    ABSTRACTOPERATION_SYM RosOperationMacroBody
;


/*
 * ABSTRACT-ERROR Macro X.407 (same as ROS Error)
 */
AsnAbstractErrorMacroType =
    ABSTRACTERROR_SYM RosErrParameter
;


/*
 * X.509 Authentication Framework  ALGORITHM macro type
 */
AfAlgorithmMacroType =
    ALGORITHM_SYM PARAMETER_SYM Type
;

/*
 * X.509 Authentication Framework  ENCRYPTED macro type
 */
AfEncryptedMacroType =
    ENCRYPTED_SYM Type
;


/*
 * X.509 Authentication Framework SIGNED macro type
 */
AfSignedMacroType =
    SIGNED_SYM Type
;

/*
 * X.509 Authentication Framework SIGNATURE macro type
 */
AfSignatureMacroType =
    SIGNATURE_SYM Type
;



/*
 * X.509 Authentication Framework PROTECTED macro type
 *  (same as SIGNATURE except for key word)
 */
AfProtectedMacroType =
    PROTECTED_SYM Type
;



SnmpObjectTypeMacroType =
    OBJECTTYPE_SYM
    SYNTAX_SYM Type
    ACCESS_SYM SnmpAccess
    STATUS_SYM SnmpStatus
    SnmpDescrPart
    SnmpReferPart
    SnmpIndexPart
    SnmpDefValPart
;

SnmpAccess =
   identifier
;

SnmpStatus =
   identifier
;

SnmpDescrPart =
   DESCRIPTION_SYM Value
  |
;

SnmpReferPart =
   REFERENCE_SYM Value
 |
;

SnmpIndexPart =
   INDEX_SYM LEFTBRACE_SYM TypeOrValueList RIGHTBRACE_SYM
  |
;

SnmpDefValPart =
   DEFVAL_SYM LEFTBRACE_SYM Value RIGHTBRACE_SYM
  |
;
