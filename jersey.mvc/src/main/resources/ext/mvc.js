// Generated by CoffeeScript 1.6.1
var Router, cms, mvcContext, requestUtils;

mvcContext = appContext("ext/mvc_context.xml");

requestUtils = bean("requestUtils", mvcContext);

cms = bean("cms", mvcContext);

Router = (function() {

  Router.prototype.meta = {
    doc: "This is the router class for the server."
  };

  function Router(name) {
    this.name = name;
    this.suffix = ".ftl";
    this.prefix = "views/";
    this.errorPage = "error";
    this.notFoundPage = "404";
    this.defaultPrefix = "views/";
    this.theme = "default";
    this.gets = smap();
    this.posts = smap();
    this.dels = smap();
    this.puts = smap();
    this.master = "master";
  }

  Router.prototype.setTheme = function(theme) {
    this.prefix = "themes/" + theme + "/";
    return cms.theme = theme;
  };

  Router.prototype.get = function(pattern, handler) {
    return this.gets.put(pattern, handler);
  };

  Router.prototype.post = function(pattern, handler) {
    return this.posts.put(pattern, handler);
  };

  Router.prototype.del = function(pattern, handler) {
    return this.dels.put(pattern, handler);
  };

  Router.prototype.put = function(pattern, handler) {
    return this.puts.put(pattern, handler);
  };

  Router.prototype.service = function(pattern, handler) {
    this.get(pattern, handler);
    return this.post(pattern, handler);
  };

  Router.prototype.getMatched = function(map, target) {
    var func, i, match, pattern, ret, _i, _j, _len, _ref, _ref1;
    ret = [];
    logger.info("Matching for target {}", target);
    _ref = map.keySet().toArray();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pattern = _ref[_i];
      logger.info("Pattern {} Target {}", pattern, target);
      match = sutils.match(pattern, target);
      logger.info(match);
      if (match) {
        logger.info(match.groups());
        if (match.groups() > 1) {
          logger.info("Matching controller object's function {}", match.group(1));
          func = map.get(pattern)[match.group(1)];
          if (match.groups() > 2) {
            func.groups = [];
            for (i = _j = 2, _ref1 = match.groups(); 2 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 2 <= _ref1 ? ++_j : --_j) {
              func.groups.push(match.group(i));
            }
          }
          ret.push(map.get(pattern)[match.group(1)]);
        } else {
          ret.push(map.get(pattern));
        }
      }
      if (sutils.antMatch(pattern, target)) {
        ret.push(map.get(pattern));
      }
    }
    return ret;
  };

  Router.prototype.getHandlers = function(method, target) {
    switch ("" + (method.toLowerCase())) {
      case "get":
        return this.getMatched(this.gets, target);
      case "post":
        return this.getMatched(this.posts, target);
      case "put":
        return this.getMatched(this.puts, target);
      case "delete":
        return this.getMatched(this.dels, target);
    }
    logger.warn("Nothing matched for target {} for method {}", target, method);
    return [];
  };

  Router.prototype.process = function(view, model) {
    return template("classpath:modules/" + (view + this.suffix), model);
  };

  Router.prototype.showTemplate = function(view, model) {
    var output;
    output = template("classpath:" + (this.prefix + view + this.suffix), model);
    if (!output) {
      if (this.prefix === this.defaultPrefix) {
        return this.showTemplate(this.notFoundPage, model);
      } else {
        output = template("classpath:" + (this.defaultPrefix + view + this.suffix), model);
      }
    }
    if (output) {
      return output;
    } else {
      return this.showTemplate(this.notFoundPage, model);
    }
  };

  Router.prototype.show = function(view, model) {
    var out, output;
    logger.info("Directing to view " + view);
    output = this.showTemplate(view, model);
    if (view !== this.master) {
      model.content = output;
      return this.show(this.master, model);
    } else {
      out = model.response.getWriter();
      out.println(output);
      out.flush();
      return out.close();
    }
  };

  Router.prototype.handle = function(target, baseRequest, request, response) {
    var e, handler, handlers, model, n, self, view;
    logger.info("Incomming request {} for target {}", request, target);
    handlers = this.getHandlers(request.getMethod(), target);
    self = this;
    model = {
      target: target,
      baseRequest: baseRequest,
      request: request,
      response: response,
      router: self,
      cms: cms
    };
    model.model = model;
    try {
      if (handlers.length) {
        e = request.getAttributeNames();
        while (e.hasMoreElements()) {
          n = e.nextElement();
          model[n] = request.getAttribute(n);
        }
        handler = handlers[0];
        if (handler.groups) {
          model.args = handler.groups;
        }
        view = handlers[0](request, response, model);
        if (view) {
          return this.show(view, model);
        }
      } else {
        logger.debug("Nothing matched target " + target + ", passing through");
        return requestUtils.pass(target, response);
      }
    } catch (ex) {
      model.error = ex;
      logger.error(ex.toString());
      if (ex.javaException && ("" + (ex.javaException.getClass().getSimpleName())) === "FileNotFoundException") {
        logger.warn("Not Found, " + ex.javaException);
        response.setStatus(404);
        return this.show(this.notFoundPage, model);
      } else {
        response.setStatus(500);
        return this.show(this.errorPage, model);
      }
    }
  };

  return Router;

})();
